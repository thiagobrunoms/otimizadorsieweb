import java.awt.event.WindowAdapter;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;

import org.openqa.selenium.NoSuchElementException;

import utils.DataValidation;
import exceotions.AuthenticationException;
import exceotions.DataInputException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author thiagosales
 */
public class SWOGui extends javax.swing.JFrame {

	private DefaultListModel<String> listModel;
    private JFileChooser fileDialog;
    private DefaultComboBoxModel<String> comboBoxPeriodModel;
    private Hashtable<String, File> filesHash;
    
    private Main main;
    public SWOGui() {
    	this.filesHash = new Hashtable<String, File>();
    	this.main = new Main();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    	
    
    	fileDialog = new javax.swing.JFileChooser();
    	listModel = new DefaultListModel<String>();
        jFrame1 = new javax.swing.JFrame();
        yearInput = new javax.swing.JTextField(); 
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cpfInput = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        passwordInput = new JPasswordField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pathInput = new javax.swing.JTextField();
        searchFilePathButton = new javax.swing.JButton();
        createFilesButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileNameList = new javax.swing.JList<>();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        passwordWarningLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        periodCombo = new javax.swing.JComboBox<>();
        jProgressBar1 = new javax.swing.JProgressBar(0, 100);

        fileDialog.setMultiSelectionEnabled(true);
        
        jProgressBar1.setStringPainted(true);
        
        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
        	@Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
        		closeSession(windowEvent);
        	}
		});

        jLabel3.setText("Ano:");

        jLabel4.setText("Semestre:");

        jLabel7.setText("CPF:");

        jLabel8.setText("Senha:");

        passwordInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordInputKeyTyped(evt);
            }
        });

//        jLabel9.setText("Gerencie seus planos de aula.");
//
//        fileNameClassPlanList.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 12)); // NOI18N
//        fileNameClassPlanList.setModel(listModel2);
//        jScrollPane2.setViewportView(fileNameClassPlanList);

//        addFileCPButton.setText("Adicionar Planos");
//        addFileCPButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                addFileCPButtonActionPerformed(evt);
//            }
//        });
//        
//        selectPathCPButton.setText("Selecionar Pasta");
//        selectPathCPButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                selectPathCPButtonActionPerformed(evt);
//            }
//        });
        
//        jLabel12.setText("Salve planos de aulas existentes no SIEWeb");
//
//        jLabel10.setText("Envie Planos de Aula para turmas no SieWEB.");
//        saveCPFromSIEButton.setText("Baixar");
//        saveCPFromSIEButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                saveCPFromSIEButtonActionPerformed(evt);
//            }
//        });

//        removeFilesCPButton.setText("Remover Planos");
//        removeFilesCPButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                removeFilesCPButtonActionPerformed(evt);
//            }
//        });

//        sendCPFilesButton.setText("Enviar");
//        sendCPFilesButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                sendCPFilesButtonActionPerformed(evt);
//            }
//        });


        jLabel5.setText("Gere arquivos .xlsx com lista de alunos e notas");

        jLabel6.setText("Caminho:");

        searchFilePathButton.setText("Selecionar Pasta");
        searchFilePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFilePathButtonActionPerformed(evt);
            }
        });

        createFilesButton.setText("Gerar");
        createFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFilesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(searchFilePathButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createFilesButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(pathInput))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel5)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFilePathButton)
                    .addComponent(createFilesButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Gerar Lista de Alunos", jPanel2);

        jLabel1.setText("Envie notas de alunos para o SIE Web.");

        jLabel2.setText("Lista de Arquivos com Notas");

        fileNameList.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 12)); // NOI18N
        fileNameList.setModel(listModel);
        jScrollPane1.setViewportView(fileNameList);

        addButton.setText("Adicionar Arquivos");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remover Arquivos");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        sendButton.setText("Enviar");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sendButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(235, 235, 235))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton)
                    .addComponent(sendButton))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Enviar Notas", jPanel3);

        passwordWarningLabel.setLabelFor(passwordInput);
        passwordWarningLabel.setVisible(false);
        passwordWarningLabel.setText("Senha com caracteres em maiúsculos!");

        statusLabel.setText("Inicializado");

        jLabel11.setText("Status:");

        String[] comboData = { "Atual 1º", "Atual 2º", "Próximo 1º", "Próximo 2º" };
        comboBoxPeriodModel = new DefaultComboBoxModel<String>(comboData);
        periodCombo.setModel(comboBoxPeriodModel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(periodCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cpfInput, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cpfInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(yearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(periodCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
        );

        pack();
    }// </editor-fold>   
    
    private void closeSession(java.awt.event.WindowEvent windowEvent) {
    	try {
    		main.goToMainPage();
        	main.logout();
    	} catch (Exception e) {
    		e.printStackTrace();
    	}
    	
    	System.exit(0);
    }

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
    	int[] selectedIndices = fileNameList.getSelectedIndices();
        for (int i = 0; i < selectedIndices.length; i++) {
			filesHash.remove(listModel.get(selectedIndices[i]));
			listModel.removeElementAt(selectedIndices[i]);
		}
    }           
    
//    private void saveCPFromSIEButtonActionPerformed(java.awt.event.ActionEvent evt) {
//    	try {
//			DataValidation.checkBasicInputData(cpfInput.getText(), passwordInput.getText(), yearInput.getText());
//			DataValidation.checkDataPathInputData(pathCPFromSIEInput.getText());
//			
//			String period = (String) periodCombo.getSelectedItem();
//    		String periodComponents[] = period.split(" ");
//    		Main.PERIOD_TYPES periodType;
//    		if (periodComponents[0].equals("Atual"))
//    			periodType = Main.PERIOD_TYPES.NOWADAYS;
//    		else
//    			periodType = Main.PERIOD_TYPES.NEXT;
//			
//	    	String selectedPeriod = periodComponents[1].substring(0, 1);
//	    	
//	    	Semestre semestre = new Semestre();
//	    	semestre.setPeriod(selectedPeriod + "º");
//	    	semestre.setYear(this.yearInput.getText());
//	    	
//	    	System.out.println("Baixando todos os planos do período: " + this.yearInput.getText() + " - "  + selectedPeriod+"º");
//	    	main.setUserCredentials(cpfInput.getText(), passwordInput.getText());
//	    	this.main.initialize();
//	    	boolean created = this.main.getClassPlanFromSIE(semestre, pathCPFromSIEInput.getText(), periodType);
//	    	if (created)
//	    		JOptionPane.showMessageDialog(getContentPane(), "Arquivos criados com sucesso! Verifique na pasta selecionada.");
//	    	else
//	    		JOptionPane.showMessageDialog(getContentPane(), "Não foi possível criar os arquivos para os dados considerados.");
//		} catch (DataInputException e) {
//			JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
//		} catch (AuthenticationException e) {
//			JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
//		} catch (Exception e) {
//			e.printStackTrace();
//			JOptionPane.showMessageDialog(getContentPane(), "Erro inesperado! Tente novamente!");
//		} finally {
//			main.goToMainPage();
//		}
//    	
//    }

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
    	try { //TODO Verificar se o nome do arquivo eh o esperado!
    		DataValidation.checkBasicInputData(cpfInput.getText(), passwordInput.getText(), yearInput.getText());
			
    		String period = (String) periodCombo.getSelectedItem();
    		String periodComponents[] = period.split(" ");
	    	String[] components = null;
	    	String selectedPeriod = periodComponents[1].substring(0, 1);
	    	
	    	ArrayList<Turma> turmas = new ArrayList<Turma>();
	    	for(String fileName : filesHash.keySet()) {
	    		components = fileName.split("-");
	    		period = components[1].trim();
	    		Turma t = main.createTurmaFromFile(components[0].trim(), selectedPeriod+"º", components[2].trim() + " - " + components[3].trim() + " - " + components[4].trim(), 
	    				components[5], components[6].split("\\.")[0], filesHash.get(fileName), Main.CREATE_TURMA_TYPE_FOR.GRADES);
	    		turmas.add(t);
	    	}
	    	
	    	//TODO melhorar isso!! Alto acoplamento!
	    	Semestre s = new Semestre();
			s.setTurmas(turmas);
			if (components != null) {
				s.setYear(yearInput.getText().trim());
				s.setPeriod(selectedPeriod + "º");
			}
			
			main.setUserCredentials(cpfInput.getText(), passwordInput.getText());
			main.initialize();
			boolean saved = main.sendScores(s);
			if (saved)
				JOptionPane.showMessageDialog(getContentPane(), "Notas salvas com sucesso!");
			else
				JOptionPane.showMessageDialog(getContentPane(), "As notas não foram salvas! Verifique os dados de entrada e tente novamente! Ou entre em contato com o desenvolvedor!");
			
		} catch (DataInputException e) {
			JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
		} catch (AuthenticationException e) {
			JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(getContentPane(), "Erro inesperado! Tente novamente!");
		} finally {
			main.goToMainPage();
		}
    }                                          

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
    	fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
    	int returnVal = fileDialog.showOpenDialog(getContentPane());
    	System.out.println(returnVal == JFileChooser.APPROVE_OPTION);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
           java.io.File[] files = fileDialog.getSelectedFiles();
           System.out.println(files.length);
           for (File eachFile : files) {
        	   String fileName = eachFile.getName();
        	   listModel.addElement(fileName);
        	   System.out.println("associando esse arquivo");
        	   System.out.println(eachFile);
        	   filesHash.put(fileName, eachFile);
           }
        }
    }    

    private void createFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
    	boolean fatalError = false;
    	try {
    		DataValidation.checkBasicInputData(cpfInput.getText(), passwordInput.getText(), yearInput.getText());
			DataValidation.checkDataPathInputData(pathInput.getText());
			
			String period = (String) periodCombo.getSelectedItem();
    		String periodComponents[] = period.split(" ");
	    	String[] components = null;
	    	String selectedPeriod = periodComponents[1].substring(0, 1);
	    	
			main.setUserCredentials(cpfInput.getText(), passwordInput.getText());
			main.initialize();
			
			boolean created = main.createFilesForTurmas(pathInput.getText(), yearInput.getText(),  selectedPeriod + "º");
			
			if (created)	
				JOptionPane.showMessageDialog(getContentPane(), "Arquivos criados com sucesso! Por favor, verifique-os na pasta selecionada!");
			else	
				JOptionPane.showMessageDialog(getContentPane(), "1 Não foi possível gerar o arquivo! Verifique os dados de entrada e tente novamente.");
			
			jProgressBar1.setValue(100);
			
		} catch (DataInputException e) {	
			JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
		} catch (IOException e) {
			JOptionPane.showMessageDialog(getContentPane(), "2 Não foi possível criar arquivos. Verifique os dados de entrada e tente novamente.");
		} catch (AuthenticationException e) {
			JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
		} catch (NoSuchElementException e) {
			e.printStackTrace();
//			JOptionPane.showMessageDialog(getContentPane(), "3 Não foi possível criar arquivos. Verifique os dados de entrada e tente novamente.");
		} catch (Exception e) {
			System.out.println(e);
			fatalError = true;
			JOptionPane.showMessageDialog(getContentPane(), "4 Não foi possível criar arquivos. Verifique a instalação do browser Chrome e tente novamente.");
    	} finally {
    		if (!fatalError)
    			main.goToMainPage();
		}
    	
    	jProgressBar1.setValue(0);
    }                                                 

    private void searchFilePathButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
    	System.out.println("para abrir...");
    	fileDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    	int returnVal = fileDialog.showOpenDialog(getContentPane());
    	if (returnVal == JFileChooser.APPROVE_OPTION) {
    		File f = fileDialog.getSelectedFile();
    		pathInput.setText(f.getAbsolutePath());
    	}
    }                                                    

//    private void addFileCPButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
//    	//TODO verificar nome do arquivo para saber se eh compatível com o nome esperado.
//    	fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
//    	int returnVal = fileDialog.showOpenDialog(getContentPane());
//    	System.out.println(returnVal == JFileChooser.APPROVE_OPTION);
//        if (returnVal == JFileChooser.APPROVE_OPTION) {
//           java.io.File[] files = fileDialog.getSelectedFiles();
//           System.out.println(files.length);
//           for (File eachFile : files) {
//        	   String fileName = eachFile.getName();
//        	   listModel2.addElement(fileName);
//        	   System.out.println("associando esse arquivo");
//        	   System.out.println(eachFile);
//        	   filesCPHash.put(fileName, eachFile);
//           }
//        }
//    }                                               

//    private void removeFilesCPButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
//    	int[] selectedIndices = fileNameClassPlanList.getSelectedIndices();
//        for (int i = 0; i < selectedIndices.length; i++) {
//			filesCPHash.remove(listModel2.get(selectedIndices[i]));
//			listModel2.removeElementAt(selectedIndices[i]);
//		}
//    }                                                   

//    private void sendCPFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
//    	try {
//			DataValidation.checkBasicInputData(cpfInput.getText(), passwordInput.getText(), yearInput.getText());
//			
//			String period = (String) periodCombo.getSelectedItem();
//    		String periodComponents[] = period.split(" ");
//    		Main.PERIOD_TYPES periodType;
//    		if (periodComponents[0].equals("Atual"))
//    			periodType = Main.PERIOD_TYPES.NOWADAYS;
//    		else
//    			periodType = Main.PERIOD_TYPES.NEXT;
//			
//    		String selectedPeriod = periodComponents[1].substring(0, 1);
//			ArrayList<Turma> turmas = new ArrayList<Turma>();
//	    	for(String fileName : filesCPHash.keySet()) {
//	    		String components[] = fileName.split("-");
//	        	Turma t = main.createTurmaFromFile(yearInput.getText(),  selectedPeriod, components[3].trim() + " - " + components[4].trim() + " - " + components[5].trim(), 
//	        			components[6].trim(), components[7].split("\\.")[0], filesCPHash.get(fileName), Main.CREATE_TURMA_TYPE_FOR.CLASSPLAN);
//	        	
//	        	turmas.add(t);
//	    	}
//	    	
//	    	Semestre s = new Semestre();
//	    	s.setTurmas(turmas);
//	    	s.setYear(yearInput.getText());
//	    	s.setPeriod(selectedPeriod);
//	    	
//	    	main.setUserCredentials(cpfInput.getText(), passwordInput.getText());
//			main.initialize();
//			main.saveClassPlan(s, periodType);
//		} catch (DataInputException e) {
//			JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
//		} catch (AuthenticationException e) {
//			JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
//		} catch (NoSuchElementException e) {
//			JOptionPane.showMessageDialog(getContentPane(), "Não foi possível realizar a operação. Verifique os dados de entrada e tente novamente.");
//		} catch (Exception e) {
//			JOptionPane.showMessageDialog(getContentPane(), "Erro inesperado. Tente novamente ou contacte o desenvolvedor");
//		} finally {
//			main.goToMainPage();
//		}
//    }                                                 

//    private void selectPathCPButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
//    	System.out.println("para abrir...");
//    	fileDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//    	int returnVal = fileDialog.showOpenDialog(getContentPane());
//    	if (returnVal == JFileChooser.APPROVE_OPTION) {
//    		File f = fileDialog.getSelectedFile();
//    		pathCPFromSIEInput.setText(f.getAbsolutePath());
//    	}
//    }                                             

    private void passwordInputKeyTyped(java.awt.event.KeyEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SWOGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SWOGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SWOGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SWOGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SWOGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify  
    private javax.swing.JButton addButton;
    private javax.swing.JTextField cpfInput;
    private javax.swing.JButton createFilesButton;
    private javax.swing.JList<String> fileNameList;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField passwordInput;
    private javax.swing.JLabel passwordWarningLabel;
    private javax.swing.JTextField pathInput;
    private javax.swing.JComboBox<String> periodCombo;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchFilePathButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField yearInput;
    // End of variables declaration                   
}
